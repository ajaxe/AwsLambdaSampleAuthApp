# serverless.yml

custom:
  serviceName: SampleAuthentication
  dataKey: ${file(dataKey.yml):dataKey}
  apigwBinary:
    types:
      - '*/*'
service:
  name: ${self:custom.serviceName}
  awsKmsKeyArn: arn:aws:kms:us-east-1:257953708933:key/b9cb1425-986a-4aec-9a83-72cdc6dba044

frameworkVersion: ">=1.0.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev # Set the default stage used. Default is dev
  region: us-east-1 # Overwrite the default region used. Default is us-east-1
  stackName: ${self:custom.serviceName}-stack # Use a custom name for the CloudFormation stack
  apiName: ${self:custom.serviceName}-api # Use a custom name for the API Gateway API
  # profile: production # The default AWS profile to use with this service
  # memorySize: 128 # Overwrite the default memory size. Default is 1024 -- defined on each function
  timeout: 10 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  logRetentionInDays: 1 # Set the default RetentionInDays for a CloudWatch LogGroup
  deploymentBucket:
    name: apogee-lambda-deploy # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
  versionFunctions: false # Optional function versioning
  endpointType: regional # Optional endpoint configuration for API Gateway REST API. Default is Edge.
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        - 'arn:aws:s3:::aws-lambda-sample-auth-app/*'
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - 'arn:aws:s3:::aws-lambda-sample-auth-app'
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:PutItem"
        - "dynamodb:DescribeTable"
        - "dynamodb:DeleteItem"
        - "dynamodb:GetItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:UpdateItem"
      Resource:
        - "arn:aws:dynamodb:us-east-1:257953708933:table/users"
        - "arn:aws:dynamodb:us-east-1:257953708933:table/authTokens"
        - "arn:aws:dynamodb:us-east-1:257953708933:table/users/index/username"

  usagePlan: # Optional usage plan configuration
    quota:
      limit: 2500
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 100
      rateLimit: 50
  stackTags: # Optional CF stack tags
    key: value

package:
  exclude:
    - ./**
    - src/web/**/*
    - node_modules/**
    - node_modules/**/aws-sdk/**
    - node_modules/**/*.md
    - node_modules/**/*.html
    - node_modules/**/*.txt
    - node_modules/**/test/**
    - node_modules/**/tests/**
    - node_modules/**/*.d.ts
    - node_modules/**/LICENSE
  include:
    - src/api/**/*
    - package.json
  individually: false # Enables individual packaging for specific function. If true you must provide package for each function. Defaults to false
  excludeDevDependencies: true

functions:

  appAuthorizer: # A Function
    handler: src/api/authorizer.handler # The file and module for this specific function.
    name: ${self:custom.serviceName}-${self:provider.stage}-appAuthorizer # optional, Deployed Lambda name
    description: Custom aurthorizer for all functions that needs it # The description of your function.
    memorySize: 128 # memorySize for this specific function.
    environment:
      dataKeyEnvVar: "${self:custom.dataKey}"

  indexGet: # A Function
    handler: src/api/handlers.indexGet # The file and module for this specific function.
    name: ${self:custom.serviceName}-${self:provider.stage}-indexGet # optional, Deployed Lambda name
    description: Server index.html # The description of your function.
    memorySize: 128 # memorySize for this specific function.
    environment:
      dataKeyEnvVar: "${self:custom.dataKey}"
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: /index.html # Path for this endpoint
          method: get # HTTP method for this endpoint
          cors: false # Turn on CORS for this endpoint, but don't forget to return the right header in your response
          # private: true # Requires clients to add API keys values in the `x-api-key` header of their request

      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: / # Path for this endpoint
          method: get # HTTP method for this endpoint
          cors: false # Turn on CORS for this endpoint, but don't forget to return the right header in your response
          # private: true # Requires clients to add API keys values in the `x-api-key` header of their request

  assetGet:
    handler: src/api/handlers.assetGet
    name: ${self:custom.serviceName}-${self:provider.stage}-assetGet
    description: Serve application assets js, css etc
    memorySize: 128
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: /assets/{proxy+} # Path for this endpoint
          method: get # HTTP method for this endpoint
          cors: false

  checkUserSessionGet:
    handler: src/api/handlers.checkUserSession
    name: ${self:custom.serviceName}-${self:provider.stage}-checkUserSessionGet
    description: Check if the user token is still valid, just a way to trigger custom authorizer
    memorySize: 128
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: /account/session # Path for this endpoint
          method: get # HTTP method for this endpoint
          cors: false
          authorizer: appAuthorizer
          resultTtlInSeconds: 0
          identitySource: method.request.header.Authorization
          identityValidationExpression: /Bearer\s([.\S]+)/

  logoutPost:
    handler: src/api/handlers.logoutUser
    name: ${self:custom.serviceName}-${self:provider.stage}-logoutPost
    description: Logout logged-in user
    memorySize: 128
    environment:
      dataKeyEnvVar: "${self:custom.dataKey}"
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: /account/logout # Path for this endpoint
          method: post # HTTP method for this endpoint
          cors: false
          authorizer: appAuthorizer
          resultTtlInSeconds: 0
          identitySource: method.request.header.Authorization
          identityValidationExpression: /Bearer\s([.\S]+)/

  registerUserPost:
    handler: src/api/handlers.registerUser
    name: ${self:custom.serviceName}-${self:provider.stage}-registerUserPost
    description: Register a user
    memorySize: 128
    environment:
      dataKeyEnvVar: ${self:custom.dataKey}"
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: /account/register # Path for this endpoint
          method: post # HTTP method for this endpoint
          cors: false

  loginPost:
    handler: src/api/handlers.loginUser
    name: ${self:custom.serviceName}-${self:provider.stage}-loginPost
    description: Log-in a user
    memorySize: 128
    environment:
      dataKeyEnvVar: ${self:custom.dataKey}"
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: /account/login # Path for this endpoint
          method: post # HTTP method for this endpoint
          cors: false

  usersPost:
    handler: src/api/handlers.getUsers
    name: ${self:custom.serviceName}-${self:provider.stage}-usersPost
    description: Get all users without sensitive data
    memorySize: 128
    environment:
      dataKeyEnvVar: ${self:custom.dataKey}"
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: /users # Path for this endpoint
          method: get # HTTP method for this endpoint
          cors: false

plugins:
  - serverless-plugin-typescript
  #- custom-serverless-plugin-include-dependencies
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-apigw-binary