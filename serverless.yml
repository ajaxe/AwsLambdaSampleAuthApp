# serverless.yml

custom:
  serviceName: SampleAuthentication

service:
  name: ${self:custom.serviceName}
  awsKmsKeyArn: arn:aws:kms:us-east-1:257953708933:key/b9cb1425-986a-4aec-9a83-72cdc6dba044

frameworkVersion: ">=1.0.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev # Set the default stage used. Default is dev
  region: us-east-1 # Overwrite the default region used. Default is us-east-1
  stackName: ${self:custom.serviceName}-stack # Use a custom name for the CloudFormation stack
  apiName: ${self:custom.serviceName}-api # Use a custom name for the API Gateway API
  # profile: production # The default AWS profile to use with this service
  # memorySize: 128 # Overwrite the default memory size. Default is 1024 -- defined on each function
  timeout: 10 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  logRetentionInDays: 4 # Set the default RetentionInDays for a CloudWatch LogGroup
  deploymentBucket:
    name: serverless.${self:provider.region}.deploys # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
  role: arn:aws:iam::XXXXXX:role/role # Overwrite the default IAM role which is used for all functions
  cfnRole: arn:aws:iam::XXXXXX:role/role # ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials
  versionFunctions: false # Optional function versioning
  environment: # Service wide environment variables
    serviceEnvVar: 123456789
  endpointType: regional # Optional endpoint configuration for API Gateway REST API. Default is Edge.

  usagePlan: # Optional usage plan configuration
    quota:
      limit: 2500
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 100
      rateLimit: 50
  stackTags: # Optional CF stack tags
    key: value
  iamManagedPolicies: # Optional IAM Managed Policies, which allows to include the policies into IAM Role
    - arn:aws:iam:*****:policy/some-managed-policy
  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: ServerlessDeploymentBucket

package: # Optional deployment packaging configuration
  include: # Specify the directories and files which should be included in the deployment package
    - src/**
    - handler.js
  exclude: # Specify the directories and files which should be excluded in the deployment package
    - .git/**
    - .travis.yml
  excludeDevDependencies: true # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true
  individually: true # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false

functions:
  indexGet: # A Function
    handler: src/handlers.indexGet # The file and module for this specific function.
    name: ${self:custom.serviceName}-${self:provider.stage}-indexGet # optional, Deployed Lambda name
    description: My function # The description of your function.
    memorySize: 128 # memorySize for this specific function.
    iamRoleStatements:
      - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        - 'arn:aws:s3:::${self:custom.s3ConnectionStringPath}'
    environment: # Function level environment variables
      functionEnvVar: 12345678
    tags: # Function specific tags
      foo: bar
    package:
      include: # Specify the directories and files which should be included in the deployment package for this specific function.
        - src/**
        - handler.js
      exclude: # Specify the directories and files which should be excluded in the deployment package for this specific function.
        - .git/**
        - .travis.yml
      individually: true # Enables individual packaging for specific function. If true you must provide package for each function. Defaults to false
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: /index.html # Path for this endpoint
          method: get # HTTP method for this endpoint
          cors: true # Turn on CORS for this endpoint, but don't forget to return the right header in your response
          # private: true # Requires clients to add API keys values in the `x-api-key` header of their request

      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: / # Path for this endpoint
          method: get # HTTP method for this endpoint
          cors: true # Turn on CORS for this endpoint, but don't forget to return the right header in your response
          # private: true # Requires clients to add API keys values in the `x-api-key` header of their request
